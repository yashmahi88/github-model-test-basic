name: GitHub Model Precheck - Local RAG with Static + Dynamic Knowledge

on:
  workflow_dispatch:

jobs:
  precheck:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      models: read
    env:
      GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clean stale RAG outputs
      run: |
        echo "Cleaning previous RAG files..."
        rm -f all_extracted_rules.txt || true
        rm -f summaries/*.txt || true
        rm -f processed/*.txt || true
        rm -f batches/*.list || true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies and Ollama
      run: |
        sudo apt update
        curl -fsSL https://ollama.com/install.sh | sh
        pip install langchain langchain-community sentence-transformers faiss-cpu jq

    - name: Pull Mistral Model
      run: ollama pull mistral

    - name: Discover and Batch Knowledge Files
      run: |
        mkdir -p batches processed summaries

        find knowledge-base/ dynamic-knowledge/ -type f \( -name "*.txt" -o -name "*.md" -o -name "*.yml" -o -name "*.json" \) > all_knowledge_files.list

        MAX_BATCH_SIZE=50
        MAX_CHARS_PER_BATCH=50000

        batch_num=0
        current_batch_size=0
        current_batch_chars=0

        while IFS= read -r file; do
          file_size=$(wc -c < "$file" 2>/dev/null || echo 0)
          if [[ $current_batch_size -ge $MAX_BATCH_SIZE ]] || [[ $((current_batch_chars + file_size)) -gt $MAX_CHARS_PER_BATCH ]]; then
            batch_num=$((batch_num + 1))
            current_batch_size=0
            current_batch_chars=0
          fi
          echo "$file" >> "batches/batch_${batch_num}.list"
          current_batch_size=$((current_batch_size + 1))
          current_batch_chars=$((current_batch_chars + file_size))
        done < all_knowledge_files.list

    - name: Process All Batches
      run: |
        for batch_file in batches/batch_*.list; do
          batch_name=$(basename "$batch_file" .list)
          echo "Processing $batch_name..."

          batch_content=""
          while IFS= read -r file; do
            if [[ -f "$file" ]]; then
              batch_content+="=== FILE: $file ===\n"
              batch_content+="$(cat "$file")\n\n"
            fi
          done < "$batch_file"

          echo -e "$batch_content" > "processed/${batch_name}_content.txt"
        done

    - name: Extract Rules using Local RAG
      run: |
        for batch_file in processed/batch_*_content.txt; do
          batch_name=$(basename "$batch_file" _content.txt)

          python3 rag_static_and_dynamic.py \
            --workflow ".github/workflows/main-ci.yml" \
            --knowledge_folder "knowledge-base dynamic-knowledge" \
            --query_type "rule-extraction" \
            --batch_file "$batch_file" \
            --output_file "summaries/${batch_name}_rules.txt"
        done

        cat summaries/batch_*_rules.txt > all_extracted_rules.txt

    - name: Final Workflow Analysis
      run: |
        python3 rag_static_and_dynamic.py \
          --workflow ".github/workflows/main-ci.yml" \
          --knowledge_folder "knowledge-base dynamic-knowledge" \
          --query_type "final-analysis" \
          --batch_file "all_extracted_rules.txt" \
          --output_file "final_analysis.txt"

        echo "Final RAG Analysis:"
        cat final_analysis.txt

        PREDICTION=$(grep -oiE 'PREDICTION[: ]+[A-Z_]+' final_analysis.txt | tail -n1 | sed -E 's/.*PREDICTION[: ]+([A-Z_]+)/\\1/' | tr '[:lower:]' '[:upper:]')

        if [[ -z "$PREDICTION" ]]; then
          if grep -qi "insufficient" final_analysis.txt; then
            PREDICTION="INSUFFICIENT_KNOWLEDGE"
          elif grep -qi "fail" final_analysis.txt; then
            PREDICTION="FAIL"
          elif grep -qi "pass" final_analysis.txt; then
            PREDICTION="PASS"
          else
            PREDICTION="INSUFFICIENT_KNOWLEDGE"
          fi
        fi

        echo "Final Prediction: $PREDICTION"

        case "$PREDICTION" in
          "PASS")
            echo "✅ Workflow PASSED"
            ;;
          "FAIL")
            echo "❌ Workflow FAILED"
            exit 1
            ;;
          *)
            echo "⚠️ Unclear or insufficient knowledge"
            exit 1
            ;;
        esac

    - name: Upload RAG Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rag-analysis-results
        path: |
          final_analysis.txt
          all_extracted_rules.txt
          summaries/
          processed/
          batches/
          all_knowledge_files.list
